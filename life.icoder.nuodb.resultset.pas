{
  @file resultSet.h
 * @brief Data representing a database result set.
}
unit life.icoder.nuodb.resultset;

interface

uses
  life.icoder.nuodb,
  life.icoder.nuodb.lob,
  life.icoder.nuodb.temporal,
  life.icoder.nuodb.rsmeta;

type
  {Table of data representing a database result set
 *
 * A NuoDB_ResultSet is a table of data representing a database result
 *          set, which is usually generated by executing a statement
 *          that queries the database.
 *
 * A NuoDB_ResultSet data structure maintains a cursor pointing to its
 * current row of data.  Initially the cursor is positioned before the
 * first row. The next() function moves the cursor to the next row,
 * and because it returns false when there are no more rows in the
 * NuoDB_ResultSet data structure, it can be used in a while loop to
 * iterate through the result set.
 *
 * The row data for a NuoDB_ResultSet data structure is not updatable
 * and has a cursor that moves forward only. Thus, you can iterate
 * through it only once and only from the first row to the last row.
 *
 * The NuoDB_ResultSet data structure provides getter functions
 * (getBoolean, getLong, and so on) for retrieving column values from
 * the current row. Values can be retrieved using either the index
 * number of the column or the name of the column. In general, using
 * the column index will be more efficient. Columns are numbered,
 * starting from 1. Result set columns within each row should be read
 * in left-to-right order, and each column should be read only once.
 *
 * For the getter functions, the %NuoDB C driver attempts to convert
 * the underlying SQL data to the C lanuage type specified in the
 * getter function and returns a suitable C language value.
 *
 * Column names used as input to getter functions are case
 * insensitive. The column name option is designed to be used when
 * column names are used in the SQL query that generated the result
 * set. For columns that are NOT explicitly named in the query, it is
 * best to use column numbers. If column names are used, the
 * programmer should take care to guarantee that they uniquely refer
 * to the intended columns, which can be assured with the SQL AS clause.
 *
 * A NuoDB_ResultSet data structure is automatically freed when the
 * NuoDB_Statement data structure that generated it is freed or re-executed.
 *
 * The number, types and properties of a NuoDB_ResultSet data
 * structure's columns are provided by the NuoDB_ResultSetMetaData
 * data structure, which is returned by the
 * NuoDB_ResultSet::getMetaData() function.}
  PNuoDB_ResultSet = ^NuoDB_ResultSet;
  NuoDB_ResultSet = packed record
    _state: _NuoDB_ResultSet_state_t;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a NuoDB_Lob data structure.
     *
     * The NuoDB_Lob returned is valid only as long as the current row
     * is active in the NuoDB_ResultSet.
     *
     * @param[in]   _this       a pointer to the current (this) data structure.
     * @param[in]   column      the first column is 1, the second is 2, ...
     * @param[in]   lobType     the NuoDB_Lob_Type.
     * @param[out]  lobPtr      a pointer to a NuoDB_Lob pointer that
     * contains the column value; if the value is SQL NULL, the
     * NuoDB_Lob pointer is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetLob = function (_this: PNuoDB_ResultSet; column: Integer; lobType: NuoDB_Lob_Type; lobPtr: PPNuoDB_Lob): NuoDB_Status; stdcall;
    public getLob: TgetLob;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a NuoDB_Temporal data structure.
     *
     * The NuoDB_Temporal returned is valid only as long as the
     * current row is active in the NuoDB_ResultSet.
     *
     * @param[in]   _this          a pointer to the current (this) data structure.
     * @param[in]   column         the first column is 1, the second is 2, ...
     * @param[in]   temporalType   the NuoDB_Lob_Type.
     * @param[out]  temporalPtr    a pointer to a NuoDB_Temporal pointer that
     * contains the column value; if the value is SQL NULL, the
     * NuoDB_Temporal pointer is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetTemporal = function(_this: PNuoDB_ResultSet; column: Integer; temporalType: NuoDB_Temporal_Type; temporalPtr: PPNuoDB_Temporal): NuoDB_Status; stdcall;
    public getTemporal: TgetTemporal;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a nuodb_bool_t type.
     *
     * @param[in]   _this          a pointer to the current (this) data structure.
     * @param[in]   column         the first column is 1, the second is 2, ...
     * @param[out]  boolPtr        a pointer to a nuodb_bool_t that
     * contains the column value; if the value is SQL NULL, the
     * nuodb_bool_t pointer is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetBoolean = function(_this: PNuoDB_ResultSet; column: Integer; boolPtr: Pnuodb_bool_t): NuoDB_Status; stdcall;
    public getBoolean: TgetBoolean;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a string data structure.
     *
     * The string returned is valid only as long as the current row is
     * active in the NuoDB_ResultSet.  getString() can only be used
     * with nul terminated strings that do not contain any embedded
     * nul characters.  If your application allows strings to have
     * embedded nul characters, or if your strings are not nul
     * terminated, then your client should call getStringWithLength()
     * to retrieve the string buffer and length.
     *
     * @param[in]   _this          a pointer to the current (this) data structure.
     * @param[in]   column         the first column is 1, the second is 2, ...
     * @param[out]  strPtr         a pointer to a const char * that
     * contains the column value; if the value is SQL NULL, the
     * const char * is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetString = function(_this: PNuoDB_ResultSet; column: Integer; const strPtr: PPAnsiChar): NuoDB_Status; stdcall;
    public getString: TgetString;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a string data structure.
     *
     * The string returned is valid only as long as the current row is
     * active in the NuoDB_ResultSet.
     *
     * @param[in]   _this          a pointer to the current (this) data structure.
     * @param[in]   column         the first column is 1, the second is 2, ...
     * @param[out]  length         pointer to size_t that holds the length
     * of the string in bytes.
     * @param[out]  strPtr         a pointer to a const char * that
     * contains the column value; if the value is SQL NULL, the
     * const char * is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetStringWithLength = function(_this: PNuoDB_ResultSet; column: Integer; length: NativeUInt; const strPtr: PPAnsiChar): NuoDB_Status; stdcall;
    public getStringWithLength: TgetStringWithLength;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a short.
     *
     * @param[in]   _this       a pointer to the current (this) data structure.
     * @param[in]   column      the first column is 1, the second is 2, ...
     * @param[out]  shortPtr    a pointer to a const char * that
     * contains the column value; if the value is SQL NULL, the
     * const char * is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetShort = function(_this: PNuoDB_ResultSet; column: Integer; shortPtr: PInt16): NuoDB_Status; stdcall;
    public getShort: TgetShort;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a char.
     *
     * @param[in]   _this       a pointer to the current (this) data structure.
     * @param[in]   column      the first column is 1, the second is 2, ...
     * @param[out]  charPtr     a pointer to a char that contains the
     * column value; if the value is SQL NULL, the char is set to
     * zero.  Client's can use the function wasNull() to determine if
     * the zero value represents a SQL NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetByte = function(_this: PNuoDB_ResultSet; column: Integer; charPtr: PAnsiChar): NuoDB_Status; stdcall;
    public getByte: TgetByte;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a double.
     *
     * @param[in]   _this       a pointer to the current (this) data structure.
     * @param[in]   column      the first column is 1, the second is 2, ...
     * @param[out]  doublePtr   a pointer to a double that contains the
     * column value; if the value is SQL NULL, the double is set to
     * zero.  Client's can use the function wasNull() to determine if
     * the zero value represents a SQL NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetDouble = function(_this: PNuoDB_ResultSet; column: Integer; doublePtr: PDouble): NuoDB_Status; stdcall;
    public getDouble: TgetDouble;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a long.
     *
     * @param[in]   _this       a pointer to the current (this) data structure.
     * @param[in]   column      the first column is 1, the second is 2, ...
     * @param[out]  longPtr    a pointer to a int64_t that contains the
     * column value; if the value is SQL NULL, the int64_t is set to
     * zero.  Client's can use the function wasNull() to determine if
     * the zero value represents a SQL NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetLong = function(_this: PNuoDB_ResultSet; column: Integer; doublePtr: PInt64): NuoDB_Status; stdcall;
    public getLong: TgetLong;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a int32_t.
     *
     * @param[in]   _this       a pointer to the current (this) data structure.
     * @param[in]   column      the first column is 1, the second is 2, ...
     * @param[out]  intPtr      a pointer to a int32_t that contains the
     * column value; if the value is SQL NULL, the int32_t is set to
     * zero.  Client's can use the function wasNull() to determine if
     * the zero value represents a SQL NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetInt = function(_this: PNuoDB_ResultSet; column: Integer; doublePtr: PInteger): NuoDB_Status; stdcall;
    public getInt: TgetInt;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a NuoDB_Lob data structure.
     *
     * The NuoDB_Lob returned is valid only as long as the current row
     * is active in the NuoDB_ResultSet.
     *
     * @param[in]   _this        a pointer to the current (this) data structure.
     * @param[in]   columnLabel  the label of the column.
     * @param[in]   lobType      the NuoDB_Lob_Type.
     * @param[out]  lobPtr       a pointer to a NuoDB_Lob pointer that
     * contains the column value; if the value is SQL NULL, the
     * NuoDB_Lob pointer is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetLobByLabel = function(_this: PNuoDB_ResultSet; const columnLabel: PAnsiChar; lobType: NuoDB_Lob_Type; lobPtr: PPNuoDB_Lob): NuoDB_Status; stdcall;
    public getLobByLabel: TgetLobByLabel;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a NuoDB_Temporal data structure.
     *
     * The NuoDB_Temporal returned is valid only as long as the
     * current row is active in the NuoDB_ResultSet.
     *
     * @param[in]   _this          a pointer to the current (this) data structure.
     * @param[in]   columnLabel    the label of the column.
     * @param[in]   temporalType   the NuoDB_Lob_Type.
     * @param[out]  temporalPtr    a pointer to a NuoDB_Temporal pointer that
     * contains the column value; if the value is SQL NULL, the
     * NuoDB_Temporal pointer is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetTemporalByLabel = function(_this: PNuoDB_ResultSet; const columnLabel: PAnsiChar; temporalType: NuoDB_Temporal_Type; temporalPtr: PPNuoDB_Temporal): NuoDB_Status; stdcall;
    public getTemporalByLabel: TgetTemporalByLabel;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a nuodb_bool_t type.
     *
     * @param[in]   _this          a pointer to the current (this) data structure.
     * @param[in]   columnLabel    the label of the column.
     * @param[out]  boolPtr        a pointer to a nuodb_bool_t that
     * contains the column value; if the value is SQL NULL, the
     * nuodb_bool_t pointer is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetBooleanByLabel = function(_this: PNuoDB_ResultSet; const columnLabel: PAnsiChar; boolPtr: Pnuodb_bool_t): NuoDB_Status; stdcall;
    public getBooleanByLabel: TgetBooleanByLabel;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a string data structure.
     *
     * The string returned is valid only as long as the current row is
     * active in the NuoDB_ResultSet.  getStringByLabel() can only be
     * used with nul terminated strings that do not contain any
     * embedded nul characters.  If your application allows strings to
     * have embedded nul characters, or if your strings are not nul
     * terminated, then your client should call
     * getStringWithLengthByLabel() to retrieve the string buffer and
     * length.
     *
     * @param[in]   _this          a pointer to the current (this)
     * data structure.
     * @param[in]   columnLabel    the label of the column.
     * @param[out]  strPtr         a pointer to a const char * that
     * contains the column value; if the value is SQL NULL, the
     * const char * is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetStringByLabel = function(_this: PNuoDB_ResultSet; const columnLabel: PAnsiChar; const strPtr: PPAnsiChar): NuoDB_Status; stdcall;
    public getStringByLabel: TgetStringByLabel;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a string data structure.
     *
     * The string returned is valid only as long as the current row is
     * active in the NuoDB_ResultSet.
     *
     * @param[in]   _this          a pointer to the current (this) data structure.
     * @param[in]   columnLabel    the label of the column.
     * @param[out]  length         pointer to size_t that holds the length
     * of the string in bytes.
     * @param[out]  strPtr         a pointer to a const char * that
     * contains the column value; if the value is SQL NULL, the
     * const char * is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetStringWithLengthByLabel = function(_this: PNuoDB_ResultSet; const columnLabel: PAnsiChar; length: NativeUInt; const strPtr: PPAnsiChar): NuoDB_Status; stdcall;
    public getStringWithLengthByLabel: TgetStringWithLengthByLabel;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a short.
     *
     * @param[in]   _this        a pointer to the current (this) data structure.
     * @param[in]   columnLabel  the label of the column.
     * @param[out]  shortPtr     a pointer to a const char * that
     * contains the column value; if the value is SQL NULL, the
     * const char * is NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetShortByLabel = function(_this: PNuoDB_ResultSet; const columnLabel: PAnsiChar; shortPtr: PInt16): NuoDB_Status; stdcall;
    public getShortByLabel: TgetShortByLabel;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a char.
     *
     * @param[in]   _this        a pointer to the current (this) data structure.
     * @param[in]   columnLabel  the label of the column.
     * @param[out]  charPtr      a pointer to a char that contains the
     * column value; if the value is SQL NULL, the char is set to
     * zero.  Client's can use the function wasNull() to determine if
     * the zero value represents a SQL NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetByteByLabel = function(_this: PNuoDB_ResultSet; const columnLabel: PAnsiChar; charPtr: PAnsiChar): NuoDB_Status; stdcall;
    public getByteByLabel: TgetByteByLabel;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a double.
     *
     * @param[in]   _this        a pointer to the current (this) data structure.
     * @param[in]   columnLabel  the label of the column.
     * @param[out]  doublePtr    a pointer to a double that contains the
     * column value; if the value is SQL NULL, the double is set to
     * zero.  Client's can use the function wasNull() to determine if
     * the zero value represents a SQL NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetDoubleByLabel = function(_this: PNuoDB_ResultSet; const columnLabel: PAnsiChar; doublePtr: PDouble): NuoDB_Status; stdcall;
    public getDoubleByLabel: TgetDoubleByLabel;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a long.
     *
     * @param[in]   _this        a pointer to the current (this) data structure.
     * @param[in]   columnLabel  the label of the column.
     * @param[out]  longPtr      a pointer to a int64_t that contains the
     * column value; if the value is SQL NULL, the int64_t is set to
     * zero.  Client's can use the function wasNull() to determine if
     * the zero value represents a SQL NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetLongByLabel = function(_this: PNuoDB_ResultSet; const columnLabel: PAnsiChar; doublePtr: PInt64): NuoDB_Status; stdcall;
    public getLongByLabel: TgetLongByLabel;

    {@brief   Retrieves the value of the designated column in the
     *          current row of this NuoDB_ResultSet data structure as
     *          a pointer to a int32_t.
     *
     * @param[in]   _this       a pointer to the current (this) data structure.
     * @param[in]   columnLabel  the label of the column.
     * @param[out]  intPtr      a pointer to a int32_t that contains the
     * column value; if the value is SQL NULL, the int32_t is set to
     * zero.  Client's can use the function wasNull() to determine if
     * the zero value represents a SQL NULL.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TgetIntByLabel = function(_this: PNuoDB_ResultSet; const columnLabel: PAnsiChar; doublePtr: PInteger): NuoDB_Status; stdcall;
    public getIntByLabel: TgetIntByLabel;

    {@brief   Moves the cursor froward one row from its current position.
     *
     * A NuoDB_ResultSet cursor is initially positioned before the first
     * row; the first call to the function next() makes the first row
     * the current row; the second call makes the second row the
     * current row, and so on.
     *
     * When a call to the next() function returns NUODB_NO_DATA, the
     * cursor is positioned after the last row. Any invocation of a
     * NuoDB_ResultSet function which requires a current row will result an
     * error state being returned.
     *
     * @param[in]   _this       a pointer to the current (this) data
     * structure.
     *
     * @return  Returns NuoDB_Status NUODB_SUCCESS on success.  Returns
     *          NUODB_NO_DATA when called after last row.  Returns a
     *          negative NuoDB_Status error code for an error
     *          condition.}
    public type Tnext = function(_this: PNuoDB_ResultSet): NuoDB_Status; stdcall;
    public next: Tnext;

    {@brief   Reports whether the last column read had a value of SQL NULL.
     *
     * Note that you must first call one of the getter functions on a
     * column to try to read its value and then call the function
     * wasNull() to see if the value read was SQL NULL.
     *
     * This function is used to differentiate a zero value from NULL.
     * So getInt() can return 0 but it is really SQL NULL.
     *
     * @param[in]   _this       a pointer to the current (this) data
     * structure.
     *
     * @return  true if the last column value read was SQL NULL and
     * false  otherwise.}
    public type TwasNull = function(_this: PNuoDB_ResultSet): nuodb_bool_t; stdcall;
    public wasNull: TwasNull;

    {@brief   Returns the number of columns
     *
     * @param[in]   _this       a pointer to the current (this) data
     * structure.
     *
     * @return  the number of columns in the specified result set.}
    public type TgetNumberColumns = function(_this: PNuoDB_ResultSet): Integer; stdcall;
    public getNumberColumns: TgetNumberColumns;

    {@brief  Returns true if the result set is active.
     *
     * @param[in]   _this       a pointer to the current (this) data
     * structure.
     *
     * @return  nuodb_bool_t is true if the result set is active.
     * Otherwise returns false.}
    public type TisActive = function(_this: PNuoDB_ResultSet): nuodb_bool_t; stdcall;
    public isActive: TisActive;

    {@brief   Retrieves the number, types and properties of specified
     *          NuoDB_ResultSet's columns.
     *
     * @param[in]   _this       a pointer to the current (this) data
     * structure.
     *
     * @return  a pointer to a NuoDB_ResultSetMetaData data structure,
     * or NULL to indicate an error.}
    public type TgetMetaData = function(_this: PNuoDB_ResultSet): PNuoDB_ResultSetMetaData; stdcall;
    public getMetaData: TgetMetaData;
  end;

{@brief   Frees the specified NuoDB_ResultSet
 *
 * Clients should call NuoDB_ResultSet_free() on the
 * NuoDB_ResultSet data structure when the client has finished
 * using it.
 *
 * @param[in]   results   a pointer to the current (this) NuoDB_ResultSet
 * data structure.}
type TNuoDB_ResultSet_free = procedure (_this: PNuoDB_ResultSet); stdcall;
var NuoDB_ResultSet_free: TNuoDB_ResultSet_free;


implementation

end.
