{
  @file statement.h

  @brief The data structure for executing a SQL statement.
}
unit life.icoder.nuodb.statement;

interface

uses
  life.icoder.nuodb,
  life.icoder.nuodb.connection,
  life.icoder.nuodb.resultset,
  life.icoder.nuodb.lob,
  life.icoder.nuodb.temporal;

type
  // Constant flags used by NuoDB_Statement.
  NuoDB_Statement_Flags = (
    { @brief Bitfield indicates there are NO optional flags. }
    NUODB_NO_FLAGS          = $0,

    { @brief Bitfield flag for statements with automatically
     * generated keys.}
    NUODB_AUTOGENERATEDKEYS = $1,

    { @brief Bitfield flag for statements that execute a query. }
    NUODB_EXECUTEQUERY      = $2,

    { @brief Bitfield flag for statements that update.}
    NUODB_EXECUTEUPDATE     = $4
  );

  {The data structure for executing a SQL statement.
 *
 * NuoDB_Statement is a data structure used for executing a static SQL
 *          statement and returning the results it
 *          produces. NuoDB_Statement supports both parameterized and
 *          non-parameterized SQL statements.
 *
 * Only one NuoDB_ResultSet data structure per NuoDB_Statement data
 * structure can be open at the same time.  Therefore, if the reading
 * of one NuoDB_ResultSet data structure is interleaved with the
 * reading of another, each must have been generated by different
 * NuoDB_Statement data structures. All execution function in the
 * NuoDB_Statement data structure implicitly close and free a
 * statement's current NuoDB_ResultSet data structure if an open one
 * exists.}
  PNuoDB_Statement = ^NuoDB_Statement;
  NuoDB_Statement = packed record
    _state: _NuoDB_Statement_state_t;

    {@brief Executes a non-parameterized SQL statement.
     *
     * Clients call this function to immediately execute a
     * non-parameterized SQL statement.
     *
     * @param[in]   _this  a pointer to the current (this) data structure.
     * @param[in]   sql    a pointer to a const char* that contains the
     * SQL statement string.
     * @param[in]   flag   An optional bitfield of statement flags.
     * Clients can pass a zero to indicate there are no
     * options. Clients can provide the NUODB_AUTOGENERATEDKEYS
     * bitfield to indicate that the statement should return any auto
     * generated keys.  Clients can provide the NUODB_EXECUTEQUERY
     * bitfield to optimize statements that are expected to return
     * result sets.  Client can provide the NUODB_EXECUTEUPDATE
     * bitfield to optomize statements that are expected to update the
     * database.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TexecuteSQL = function (_this: PNuoDB_Statement; const sql: PAnsiChar; flags: NuoDB_Statement_Flags): NuoDB_Status; stdcall;
    public executeSQL: TexecuteSQL;

    {@brief   Retrieves any auto-generated keys created as a result of
     *          executing this NuoDB_Statement data structure.
     *
     * If this NuoDB_Statement data structure did not generate any keys, an
     * empty NuoDB_ResultSet data structure is returned.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     *
     * @return  a pointer to a NuoDB_ResultSet data structure, or NULL to
     * indicate an error.}
    public type TgetGeneratedKeys = function (_this: PNuoDB_Statement): PNuoDB_ResultSet; stdcall;
    public getGeneratedKeys: TgetGeneratedKeys;

    {@brief   Retrieves the current result as a NuoDB_ResultSet data
     *          structure. This function should be called only once
     *          per result.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     *
     * @return  the current result as a NuoDB_ResultSet data structure or
     * NULL if there are no more results.}
    public type TgetResultSet = function (_this: PNuoDB_Statement): PNuoDB_ResultSet; stdcall;
    public getResultSet: TgetResultSet;

    {@brief   Clears the current parameter values immediately.
     *
     * In general, parameter values remain in force for repeated use
     * of a statement. Setting a parameter value automatically removes
     * its previous value. However, in some cases it is
     * useful to immediately release the resources used by the current
     * parameter values; this can be done by calling the function
     * clearParameters().
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TclearParameters = function (_this: PNuoDB_Statement): NuoDB_Status; stdcall;
    public clearParameters: TclearParameters;

    {@brief Returns the NuoDB_Connection for this statement.}
    public type TgetConnection = function (_this: PNuoDB_Statement): PNuoDB_Connection; stdcall;
    public getConnection: TgetConnection;

    {@brief   Moves to this NuoDB_Statement data structure's next result,
     *          returns the new NuoDB_ResultSet and implicitly closes
     *          and frees any current NuoDB_ResultSet data structure(s)
     *          obtained with the function getResultSet().
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     *
     * @return  the next NuoDB_ResultSet data structure or NULL
     * if there are no more results.}
    public type TgetMoreResults = function (_this: PNuoDB_Statement): PNuoDB_ResultSet; stdcall;
    public getMoreResults: TgetMoreResults;

    {@brief   Retrieves the number of microseconds the driver will
     *          wait for a NuoDB_Statement data structure to execute.
     *
     * If the limit is exceeded, the execute() function will return an
     * error code code.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     *
     * @return  the current query timeout limit in microseconds; zero
     *          means there is no limit; negative numbers are error codes.}
    public type TgetQueryTimeout = function (_this: PNuoDB_Statement): Int64; stdcall;
    public getQueryTimeout: TgetQueryTimeout;

    {@brief   Retrieves the update count
    *
    * @param[in]   _this   a pointer to the current (this) data structure.
    *
    * @return  the number of rows updated by the current statement.
    * Returns zero if there were no updates.}
    public type TgetUpdateCount = function (_this: PNuoDB_Statement): Integer; stdcall;
    public getUpdateCount: TgetUpdateCount;

    {@brief   Sets the number of microseconds the client will wait
     *          for a NuoDB_Statement data structure to execute to the
     *          given number of microseconds.
     *
     * By default there is no limit on the amount of time allowed for
     * a running statement to complete. If the limit is exceeded, the
     * execute function will return an error code code.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   the new query timeout limit in microseconds; zero
     * means there is no limit.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetQueryTimeout = function (_this: PNuoDB_Statement; microSeconds: Int64): NuoDB_Status; stdcall;
    public setQueryTimeout: TsetQueryTimeout;

    {@brief   Prepares a parameterized SQL statement.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   sql                 a pointer to a const char* that
     * contains a valid, optionally parameterized, SQL statement.
     * @param[in]   flag   An optional bitfield of statement flags.
     * Clients can pass a zero to indicate there are no options.
     * Clients can provided the NUODB_AUTOGENERATEDKEY bitfield to
     * indicate that the statement should return any auto generated
     * keys.  Clients can provide the NUODB_EXECUTEQUERY bitfield to
     * optimize statements that are expected to return result sets.
     * Client can provide the NUODB_EXECUTEUPDATE bitfield to optimize
     * statements that are expected to update the database.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type Tprepare = function (_this: PNuoDB_Statement; const sql: PAnsiChar; flags: NuoDB_Statement_Flags): NuoDB_Status; stdcall;
    public prepare: Tprepare;

    {@brief   Executes a previously prepared SQL statement.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type Texecute = function (_this: PNuoDB_Statement): NuoDB_Status; stdcall;
    public execute: Texecute;

    {@brief   Sets the designated parameter to the given const char*
     * value.
     *
     * setString() can only be used with nul terminated strings that
     * do not contain any embedded nul characters.  If your
     * application allows strings to have embedded nul characters, or
     * if your strings are not nul terminated, then your client should
     * call setStringWithLength() to explicitly set the length of the
     * stringValue.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index        the first parameter is 1, the second is
     * 2, ...
     * @param[in]   stringValue  the value to which we will set the
     * parameter.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetString = function (_this: PNuoDB_Statement; index: Integer; const stringValue: PAnsiChar): NuoDB_Status; stdcall;
    public setString: TsetString;

    {@brief   Sets the designated parameter to the given const char* value.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index        the first parameter is 1, the second is
     * 2, ...
     * @param[in]   stringValue  the value to which we will set the
     * parameter.
     * @param[in]   length       the length of the stringValue.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetStringWithLength = function (_this: PNuoDB_Statement; index: Integer; const stringValue: PAnsiChar; length: NativeUInt): NuoDB_Status; stdcall;
    public setStringWithLength: TsetStringWithLength;

    {@brief   Sets the designated parameter to the given 32-bit
     * integer value.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index   the first parameter is 1, the second is 2, ...
     * @param[in]   value  the 32-bit integer value to which we will set
     * the parameter.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetInt = function (_this: PNuoDB_Statement; index: Integer; value: Integer): NuoDB_Status; stdcall;
    public setInt: TsetInt;

    {@brief   Sets the designated parameter to the given 64-bit
     * integer value.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index   the first parameter is 1, the second is 2, ...
     * @param[in]   value  the 64-bit integer value to which we will set
     * the parameter.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetLong = function (_this: PNuoDB_Statement; index: Integer; value: Int64): NuoDB_Status; stdcall;
    public setLong: TsetLong;

    {@brief   Sets the designated parameter to the given Lob value.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index   the first parameter is 1, the second is 2, ...
     * @param[in]   value  the NuoDB_Lob value to which we will set the
     * parameter.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetLob = function (_this: PNuoDB_Statement; index: Integer; lob: PNuoDB_Lob): NuoDB_Status; stdcall;
    public setLob: TsetLob;

    {@brief   Sets the designated parameter to the given boolean value.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index   the first parameter is 1, the second is 2, ...
     * @param[in]   value  the boolean value to which we will set the
     * parameter.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetBoolean = function (_this: PNuoDB_Statement; index: Integer; lob: nuodb_bool_t): NuoDB_Status; stdcall;
    public setBoolean: TsetBoolean;

    {@brief   Sets the designated parameter to the given short value.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index   the first parameter is 1, the second is 2, ...
     * @param[in]   value  the short value to which we will set the
     * parameter.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetShort = function (_this: PNuoDB_Statement; index: Integer; value: Int16): NuoDB_Status; stdcall;
    public setShort: TsetShort;

    {@brief   Sets the designated parameter to the given char value.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index   the first parameter is 1, the second is 2, ...
     * @param[in]   value   the one-byte value to which we will set the
     * parameter.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetByte = function (_this: PNuoDB_Statement; index: Integer; value: AnsiChar): NuoDB_Status; stdcall;
    public setByte: TsetByte;

    {@brief   Sets the designated parameter to SQL NULL.
     *
     * Note: You must specify the parameter's SQL type.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index   the first parameter is 1, the second is 2, ...
     * @param[in]   type_    the type code as defined in NUODB_TYPE_* values.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetNull = function (_this: PNuoDB_Statement; index: Integer; type_: Integer): NuoDB_Status; stdcall;
    public setNull: TsetNull;

    {@brief   Sets the designated parameter to the given
     * double-precision value.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index   the first parameter is 1, the second is 2, ...
     * @param[in]   value   the double-precision value to which we will
     * set the parameter.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetDouble = function (_this: PNuoDB_Statement; index: Integer; value: Double): NuoDB_Status; stdcall;
    public setDouble: TsetDouble;

    {@brief   Sets the designated parameter to the given
     * NuoDB_Temporal value.
     *
     * @param[in]   _this   a pointer to the current (this) data structure.
     * @param[in]   index   the first parameter is 1, the second is 2, ...
     * @param[in]   value   the NuoDB_Temporal value to which we will set
     * the parameter.
     *
     * @return  Enumerated integer NuoDB_Status.  NUODB_SUCCESS
     * (integer 0) on success, or a negative integer on failure.}
    public type TsetTemporal = function (_this: PNuoDB_Statement; index: Integer; timeValue: PNuoDB_Temporal): NuoDB_Status; stdcall;
    public setTemporal: TsetTemporal;
  end;

{@brief Creates a NuoDB_Statement data structure.
 *
 * This is a factory function for creating NuoDB_Statements from the
 * specified NuoDB_Connection.  Clients are expected to call the
 * NuoDB_Statement_free() function which the client is finished with
 * statement.}
type TNuoDB_Statement_create = function(connection: PNuoDB_Connection):PNuoDB_Statement; stdcall;
var NuoDB_Statement_create: TNuoDB_Statement_create;

{@brief Frees a NuoDB_Statement data structure.
 *
 * Clients should call this function when they are finished with
 * statement.}
type TNuoDB_Statement_free = procedure (statement: PNuoDB_Statement); stdcall;
var NuoDB_Statement_free: TNuoDB_Statement_free;

implementation

end.
